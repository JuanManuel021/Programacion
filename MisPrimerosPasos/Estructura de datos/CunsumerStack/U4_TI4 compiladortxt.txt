import java.util.Stack;

public class App {
    public static void main(String[] args) throws Exception {
      /*
        Pila<String> pila=new Pila<>(3);
        pila.push("plato 1");
        pila.push("plato 2");
        pila.push("plato 3");

        System.out.println("Elemento de la pila "+pila.peek());

        System.out.println("Pila vacia "+pila.isEmpty());

        while (!pila.isEmpty()) {
            System.out.println("elemento eliminado "+pila.pop());
            
        }
        System.out.println("Pila vacia "+pila.isEmpty());


       String valor="hola mundo";
       
        String nuevaCadena="";

        for (int i = 0; i < valor.length(); i++) {
            nuevaCadena=nuevaCadena+valor.charAt(valor.length()-i-1);
            
        }
        System.out.println(nuevaCadena);*/


        String ecuacion="(a+b)(d+c";
        char variable;
         Stack<Character> pila2 = new Stack<>();

        for (int i = 0; i < ecuacion.length(); i++) {
            variable=ecuacion.charAt(i);
         if (variable=='('){
            pila2.push('9');

         }else if (variable==')') {
            pila2.pop();
         }

        
    }
    System.out.println();
    System.out.println("La ecuaciÃ³n no tiene todos sus ) de cierre "+!pila2.isEmpty());
}
}

-----------------------------------------
public class Pila<T> {
    int capacidad;
    int tope;
    T[] items;

    @SuppressWarnings("unchecked")
    Pila(int capacidad){
        this.capacidad=capacidad;
        tope=-1;
        this.items=(T[])new Object[capacidad];
    }

    public void push(T item){
        if(isFull()){
            System.out.println("El stack ya esta lleno, ni puedes agregar mas ");
            return;
        }
        items[++tope]=item;
            }
    public T pop(){
        if(isEmpty()){
            System.out.println("El stack esta vacio");
            return null;
        }
        return items[tope--];
    }
    public T peek(){
        if(isEmpty()){
            System.out.println("El stack esta vacio");
            return null;

        }
        return items[tope];
    }




        public boolean isEmpty(){
            return(tope==-1);
        }
        public boolean isFull(){
            return (tope==capacidad-1);
        }
    }
